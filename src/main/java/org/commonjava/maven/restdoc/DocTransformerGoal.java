package org.commonjava.maven.restdoc;

/*
 * Copyright 2001-2005 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Set;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerFactoryConfigurationError;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.apache.maven.artifact.Artifact;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.plugins.annotations.ResolutionScope;
import org.apache.maven.project.MavenProject;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 * Aggregate and transform rest-doc XMLs embedded in dependencies under 
 * <code>META-INF/rest-docs/rest-api-out.xml</code> that were generated by the 
 * annotation processor in:
 * 
 * <pre>
 *   &lt;dependency&gt;
 *     &lt;groupId&gt;org.rhq.helpers&lt;/groupId&gt;
 *     &lt;artifactId&gt;rest-docs-generator&lt;/artifactId&gt;
 *     &lt;version&gt;4.6.0&lt;/version&gt;
 *   &lt;/dependency&gt;
 * </pre>
 * 
 * ...and then embedded in the project jar using POM's &lt;build&gt;&lt;resources/&gt; configuration.
 */
@Mojo( name = "generate", defaultPhase = LifecyclePhase.PROCESS_RESOURCES, requiresDependencyResolution = ResolutionScope.RUNTIME )
public class DocTransformerGoal
    extends AbstractMojo
{
    /**
     * Location to which generated documentation will be written.
     */
    @Parameter( defaultValue = "${project.build.directory}/restdocs", property = "restdoc.output", required = true )
    private File output;

    /**
     * Location in the plugin classpath from which to read the XSLT stylesheet. 
     * This is designed to be friendly to deployment of stylesheets via jars, 
     * then inclusion via plugin-level dependencies.
     */
    @Parameter( defaultValue = "html.xsl", property = "restdoc.stylesheet" )
    private String stylesheet;

    @Parameter( defaultValue = "${project}", readonly = true )
    private MavenProject project;

    public void execute()
        throws MojoExecutionException
    {
        final Document master = mergeEmbeddedRestDocs();

        final Transformer transformer = createTransformer();

        write( master, transformer );
    }

    private Document mergeEmbeddedRestDocs()
        throws MojoExecutionException
    {
        final ClassLoader ucl = createClassLoader();
        Enumeration<URL> resources;
        try
        {
            resources = ucl.getResources( "META-INF/rest-docs/rest-api-out.xml" );
        }
        catch ( final IOException e )
        {
            throw new MojoExecutionException( "Failed to query URLClassLoader for rest-doc resources: "
                + e.getMessage(), e );
        }

        DocumentBuilder builder;
        try
        {
            builder = DocumentBuilderFactory.newInstance()
                                            .newDocumentBuilder();
        }
        catch ( final ParserConfigurationException e )
        {
            throw new MojoExecutionException( "Failed to instantiate new DocumentBuilder: " + e.getMessage(), e );
        }

        Document master = null;
        while ( resources.hasMoreElements() )
        {
            final URL resource = resources.nextElement();
            InputSource is;
            try
            {
                is = new InputSource( resource.openStream() );
                final Document document = builder.parse( is );

                if ( master == null )
                {
                    master = document;
                }
                else
                {
                    final Element root = master.getDocumentElement();

                    final NodeList toAdd = document.getDocumentElement()
                                                   .getChildNodes();
                    for ( int i = 0; i < toAdd.getLength(); i++ )
                    {
                        root.appendChild( toAdd.item( i ) );
                    }
                }
            }
            catch ( final IOException e )
            {
                throw new MojoExecutionException( "Failed to read: " + resource + ". Reason: " + e.getMessage(), e );
            }
            catch ( final SAXException e )
            {
                throw new MojoExecutionException( "Failed to parse: " + resource + ". Reason: " + e.getMessage(), e );
            }

        }

        return master;
    }

    private ClassLoader createClassLoader()
        throws MojoExecutionException
    {
        final Set<Artifact> artifacts = project.getDependencyArtifacts();
        final List<URL> urls = new ArrayList<URL>( artifacts.size() );
        for ( final Artifact a : artifacts )
        {
            try
            {
                urls.add( a.getFile()
                           .toURI()
                           .toURL() );
            }
            catch ( final MalformedURLException e )
            {
                throw new MojoExecutionException( "Error generating URL from artifact: " + a + " (file: " + a.getFile()
                    + "). Reason: " + e.getMessage(), e );
            }
        }

        return new URLClassLoader( urls.toArray( new URL[urls.size()] ) );
    }

    private void write( final Document master, final Transformer transformer )
        throws MojoExecutionException
    {
        output.mkdirs();
        final File out = new File( "restdocs.html" );

        OutputStream outStream = null;
        try
        {
            outStream = new FileOutputStream( out );

            final Result result = new StreamResult( outStream );
            final Source src = new DOMSource( master );

            transformer.transform( src, result );
        }
        catch ( final IOException e )
        {
            throw new MojoExecutionException( "Failed to write transformed output to: " + out + ". Reason: "
                + e.getMessage(), e );
        }
        catch ( final TransformerException e )
        {
            throw new MojoExecutionException( "Failed to transform to: " + out + ". Reason: " + e.getMessage(), e );
        }
        finally
        {
            if ( outStream != null )
            {
                try
                {
                    outStream.close();
                }
                catch ( final IOException e )
                {
                }
            }
        }
    }

    private Transformer createTransformer()
        throws MojoExecutionException
    {
        final InputStream xsltStream = Thread.currentThread()
                                             .getContextClassLoader()
                                             .getResourceAsStream( this.stylesheet );
        if ( xsltStream == null )
        {
            throw new MojoExecutionException( "Cannot find stylesheet as plugin-classpath resource: " + stylesheet );
        }

        final Source xslt = new StreamSource( xsltStream );

        Transformer transformer;
        try
        {
            transformer = TransformerFactory.newInstance()
                                            .newTransformer( xslt );

            transformer.setOutputProperty( OutputKeys.INDENT, "yes" );
        }
        catch ( final TransformerConfigurationException e )
        {
            throw new MojoExecutionException( "Failed to instantiate Transformer: " + e.getMessage(), e );
        }
        catch ( final TransformerFactoryConfigurationError e )
        {
            throw new MojoExecutionException( "Failed to instantiate Transformer: " + e.getMessage(), e );
        }

        return transformer;
    }
}
